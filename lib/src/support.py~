# -*- coding: utf-8 -*-

from functools import wraps
import inspect
import time


# decorator for mongo db collection and close
def mongo_collect(fn):
	@wraps(fn)
	def inner(*args, **kwargs):
		from pymongo import MongoClient
		client = MongoClient('localhost', 27017)
		res = fn(client, *args, **kwargs)
		client.close()
		return res
	return inner

# decorator for logger
def logger(log_level):
	def get_line_number():
		return inspect.currentframe().f_back.f_back.f_lineno

	def _basic_log(fn, result, *args, **kwargs):
		print "function   = " + fn.__name__,
		print "    arguments = {0} {1}".format(args, kwargs)
		print "    return    = {0}".format(result)
	
	def info_log_decorator(fn):
		@wraps(fn)
		def wrapper(*args, **kwargs):
			result = fn(*args, **kwargs)
			_basic_log(fn, result, args, kwargs)
		return wrapper

	def debug_log_decorator(fn):
		@wraps(fn)
		def wrapper(*args, **kwargs):
			ts = time.time()
			result = fn(*args, **kwargs)
			te = time.time()
			_basic_log(fn, result, args, kwargs)
			print "    time      = %.6f sec" % (te-ts)
			print "    called_from_line : " + str(get_line_number())
		return wrapper
 
	if log_level is "debug":
		return debug_log_decorator
	elif log_level is 'info':
		return info_log_decorator
	else:
		pass

